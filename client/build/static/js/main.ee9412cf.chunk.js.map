{"version":3,"sources":["utils/auth.js","components/BookListSearch.js","utils/getUserId.js","utils/mutations.js","utils/localStorage.js","utils/removeDuplicateBooks.js","pages/SearchBooks.js","utils/API.js","components/BookListSaved.js","utils/queries.js","pages/SavedBooks.js","components/SignupForm.js","components/LoginForm.js","components/Navbar.js","App.js","reportWebVitals.js","index.js"],"names":["this","getToken","token","isTokenExpired","decode","exp","Date","now","err","localStorage","getItem","idToken","setItem","window","location","assign","removeItem","BookListSearch","searchedBooks","savedBookIds","handleSaveBook","source","Container","length","Row","xs","md","lg","xl","className","map","book","Card","border","image","Img","src","alt","title","variant","style","height","width","objectPosition","overflow","Body","Title","authors","join","publishedDate","Text","description","Auth","loggedIn","Button","disabled","some","savedBookId","bookId","onClick","size","target","href","infoLink","previewLink","getUserId","user","data","_id","LOGIN_USER","gql","ADD_USER","ADD_BOOK","REMOVE_BOOK","removeBookId","JSON","parse","updatedSavedBookIds","filter","stringify","removeDuplicateBooks","items","allBookIds","id","allBooks","volumeInfo","duplicateBookIds","uniqueBookIds","uniqueBooks","i","includes","push","index","SearchBooks","useState","setSearchedBooks","searchInput","setSearchInput","setSavedBookIds","useEffect","bookIdArr","handleFormSubmit","event","preventDefault","fetch","response","ok","Error","json","bookData","imageLinks","thumbnail","console","error","useMutation","addBook","userId","bookToSave","find","variables","log","Jumbotron","fluid","Form","onSubmit","Control","name","value","onChange","e","type","placeholder","BookListSaved","savedBooks","handleDeleteBook","objectFit","QUERY_ME","SavedBooks","removeBook","useQuery","loading","me","element","SignupForm","username","email","password","userFormData","setUserFormData","addUser","validated","showAlert","setShowAlert","handleInputChange","currentTarget","checkValidity","stopPropagation","login","noValidate","Group","Label","htmlFor","required","Feedback","Alert","dismissible","onClose","show","LoginForm","AppNavbar","showModal","setShowModal","Navbar","collapseOnSelect","bg","expand","Brand","as","Link","to","Toggle","Collapse","Nav","eventKey","logout","Modal","onHide","Tab","defaultActiveKey","Header","closeButton","Item","Content","Pane","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","App","ApolloProvider","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"yWA6De,MAzDE,4CAsDd,OAtDc,uCAEf,WAEE,OADcA,KAAKC,QAErB,GAEA,sBACA,WAEE,IAAMC,EAAQF,KAAKC,WACnB,QAASC,IAAUF,KAAKG,eAAeD,EACzC,GAEA,4BACA,SAAeA,GACb,IAEE,OADgBE,IAAOF,GACXG,IAAMC,KAAKC,MAAQ,GAKjC,CAFE,MAAOC,GACP,OAAO,CACT,CACF,GAAC,sBAED,WAEE,OAAOC,aAAaC,QAAQ,WAC9B,GAAC,mBAED,SAAMC,GAEJF,aAAaG,QAAQ,WAAYD,GAEjCE,OAAOC,SAASC,OAAO,IACzB,GAAC,oBAED,WAEEN,aAAaO,WAAW,YAGxBP,aAAaO,WAAW,eAExBH,OAAOC,SAASC,OAAO,IACzB,GAAC,0BAED,WAEEN,aAAaO,WAAW,YAGxBP,aAAaO,WAAW,cAC1B,KAAC,EAtDc,I,OCmFFC,EAnFQ,SAAH,GAKb,IAJLC,EAAa,EAAbA,cACAC,EAAY,EAAZA,aACAC,EAAc,EAAdA,eACM,EAANC,OAEA,OACE,mCACE,eAACC,EAAA,EAAS,WACR,6BACGJ,EAAcK,OAAM,kBACNL,EAAcK,OAAM,aAC/B,+BAEN,cAACC,EAAA,EAAG,CAACC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,UAAU,UAAS,SACjDX,EAAcY,KAAI,SAACC,GAClB,OACE,eAACC,EAAA,EAAI,CAAmBC,OAAO,OAAOJ,UAAU,MAAK,UAClDE,EAAKG,MACJ,cAACF,EAAA,EAAKG,IAAG,CACPC,IAAKL,EAAKG,MACVG,IAAG,wBAAmBN,EAAKO,OAC3BC,QAAQ,MACRC,MAAO,CACLC,OAAQ,QACRC,MAAO,OACPC,eAAgB,MAChBC,SAAU,YAGZ,KACJ,eAACZ,EAAA,EAAKa,KAAI,WACR,cAACb,EAAA,EAAKc,MAAK,CAACjB,UAAU,OAAM,SAAEE,EAAKO,QACnC,oBAAGT,UAAU,aAAY,UAA0B,IAAxBE,EAAKgB,QAAQxB,OAAe,WAAa,YAAW,cAAOQ,EAAKgB,QAAQC,KAAK,UACxG,oBAAGnB,UAAU,aAAY,6BACNE,EAAKkB,iBAExB,cAACjB,EAAA,EAAKkB,KAAI,CAACV,MAAO,CAAEC,OAAQ,QAASG,SAAU,UAAW,SACvDb,EAAKoB,cAEPC,EAAKC,YACJ,cAACC,EAAA,EAAM,CACLC,SAAsB,OAAZpC,QAAY,IAAZA,OAAY,EAAZA,EAAcqC,MACtB,SAACC,GAAW,OAAKA,IAAgB1B,EAAK2B,MAAM,IAE9C7B,UAAU,qBACV8B,QAAS,kBAAMvC,EAAeW,EAAK2B,OAAO,EAAC,SAE9B,OAAZvC,QAAY,IAAZA,KAAcqC,MACb,SAACC,GAAW,OAAKA,IAAgB1B,EAAK2B,MAAM,IAE1C,sBACA,oBAGR,sBAAK7B,UAAU,iCAAgC,UAC7C,cAACyB,EAAA,EAAM,CACLzB,UAAU,+BACV+B,KAAK,KACLC,OAAO,SACPC,KAAM/B,EAAKgC,SAAS,yBAItB,cAACT,EAAA,EAAM,CACLzB,UAAU,+BACV+B,KAAK,KACLC,OAAO,SACPC,KAAM/B,EAAKiC,YAAY,oCAnDpBjC,EAAK2B,OA2DpB,UAKV,EClFaO,EAAY,WACvB,IAAM/D,EAAQkD,EAAKC,WAAaD,EAAKnD,WAAa,KAC5CiE,EAAOhE,GAASE,IAAOF,GAE7B,OADeA,GAASgE,EAAKC,KAAKC,GAEpC,E,iBCNaC,EAAaC,YAAG,qNAYhBC,EAAWD,YAAG,kQAYdE,EAAWF,YAAG,qtBAuCdG,EAAcH,YAAG,0M,SCjDjBI,EAAe,SAAChB,GAC3B,IAAMvC,EAAeV,aAAaC,QAAQ,eACtCiE,KAAKC,MAAMnE,aAAaC,QAAQ,gBAChC,KAEJ,IAAKS,EACH,OAAO,EAGT,IAAM0D,EAAkC,OAAZ1D,QAAY,IAAZA,OAAY,EAAZA,EAAc2D,QACxC,SAACrB,GAAW,OAAKA,IAAgBC,CAAM,IAIzC,OAFAjD,aAAaG,QAAQ,cAAe+D,KAAKI,UAAUF,KAE5C,CACT,EC/BaG,EAAuB,SAACC,GAUnC,IAPA,IAAMC,EAAaD,EAAMnD,KAAI,SAACC,GAAI,OAAKA,EAAKoD,EAAE,IACxCC,EAAWH,EAAMnD,KAAI,SAACC,GAAI,OAAKA,EAAKsD,UAAU,IAEhDC,EAAmB,GACnBC,EAAgB,GAChBC,EAAc,GAETC,EAAI,EAAGA,EAAIP,EAAW3D,OAAQkE,IAChCF,EAAcG,SAASR,EAAWO,IAIrCH,EAAiBK,KAAK,CAAER,GAAID,EAAWO,GAAIG,MAAOH,KAHlDF,EAAcI,KAAKT,EAAWO,IAC9BD,EAAYG,KAAKP,EAASK,KAO9B,IAAK,IAAIA,EAAI,EAAGA,EAAID,EAAYjE,OAAQkE,IACtCD,EAAYC,GAAGN,GAAKI,EAAcE,GAGpC,OAAOD,CACT,EC8GeK,EA3HK,WAElB,MAA0CC,mBAAS,IAAG,mBAA/C5E,EAAa,KAAE6E,EAAgB,KAEtC,EAAsCD,mBAAS,IAAG,mBAA3CE,EAAW,KAAEC,EAAc,KAGlC,EAAwCH,mBFlBnBrF,aAAaC,QAAQ,eACtCiE,KAAKC,MAAMnE,aAAaC,QAAQ,gBAChC,IEgB+D,mBAA5DS,EAAY,KAAE+E,EAAe,KAIpCC,qBAAU,WFfe,IAACC,KEgBLjF,GFfPI,OACZd,aAAaG,QAAQ,cAAe+D,KAAKI,UAAUqB,IAEnD3F,aAAaO,WAAW,cEa1B,GAAG,CAACG,IAGJ,IAAMkF,EAAgB,iDAAG,WAAOC,GAAK,yFACZ,GAAvBA,EAAMC,iBAEDP,EAAY,CAAD,yCACP,GAAK,gCC5BTQ,MAAM,iDAAD,ODgCiCR,EC/BW,gDD+BE,KAAD,EAAvC,IAARS,EAAQ,QAEAC,GAAG,CAAD,qBACR,IAAIC,MAAM,yBAAyB,KAAD,mBAGlBF,EAASG,OAAO,KAAD,YAA/B3B,EAAK,EAALA,MAIJO,EAAcR,EAAqBC,GAEjC4B,EAAWrB,EAAY1D,KAAI,SAACC,GAAI,YAAM,CAC1C2B,OAAQ3B,EAAKoD,GACbpC,QAAShB,EAAKgB,SAAW,CAAC,wBAC1BT,MAAOP,EAAKO,MACZa,YAAapB,EAAKoB,aAAe,4BACjCjB,OACiB,QAAf,EAAAH,EAAK+E,kBAAU,aAAf,EAAiBC,YACjB,gFACF9D,cAAelB,EAAKkB,eAAiB,kBACrCe,YAAajC,EAAKiC,aAAe,kBACjCD,SAAUhC,EAAKgC,UAAY,eAC5B,IAEDgC,EAAiBc,GACjBZ,EAAe,IAAI,kDAEnBe,QAAQC,MAAM,EAAD,IAAM,0DAEtB,gBAtCqB,sCAwCtB,EAAkBC,YAAY1C,GAAvB2C,EAAgC,iBAAzB,GAGVC,EAASnD,IAGP7C,EAAc,iDAAG,WAAOsC,GAAM,qFAEqC,OAAjE2D,EAAanG,EAAcoG,MAAK,SAACvF,GAAI,OAAKA,EAAK2B,SAAWA,CAAM,IAAE,EAAD,gBAG9CyD,EAAQ,CAC7BI,UAAU,aACRpC,GAAIiC,GACDC,KAEJ,KAAD,WALMlD,EAAI,EAAJA,KAOR6C,QAAQQ,IAAIrD,GAGZ+B,EAAgB,GAAD,mBAAK/E,GAAY,CAAEkG,EAAW3D,UAAS,kDAEtDsD,QAAQC,MAAM,EAAD,IAAM,0DAEtB,gBAnBmB,sCAqBpB,OACE,qCACE,cAACQ,EAAA,EAAS,CAACC,OAAK,EAAC7F,UAAU,qBAAoB,SAC7C,eAACP,EAAA,EAAS,WACR,mDACA,cAACqG,EAAA,EAAI,CAACC,SAAUvB,EAAiB,SAC/B,eAACsB,EAAA,EAAKnG,IAAG,WACP,cAACmG,EAAA,EAAKE,QAAO,CACXC,KAAK,cACLtF,MAAO,CAAEE,MAAO,OAChBqF,MAAO/B,EACPgC,SAAU,SAACC,GAAC,OAAKhC,EAAegC,EAAEpE,OAAOkE,MAAM,EAC/CG,KAAK,OACLtE,KAAK,KACLuE,YAAY,sBAEd,cAAC7E,EAAA,EAAM,CACL4E,KAAK,SACL3F,QAAQ,UACRV,UAAU,OACVW,MAAO,CAAEE,MAAO,OAChBkB,KAAK,KAAI,8BASnB,cAAC,EAAQ,CACP1C,cAAeA,EACfC,aAAcA,EACdC,eAAgBA,EAChBC,OAAQ,aAIhB,EEvDe+G,EA1EO,SAAH,GAAkD,IAA5CC,EAAU,EAAVA,WAAYC,EAAgB,EAAhBA,iBAAwB,EAANjH,OACrD,OACE,mCACE,eAACC,EAAA,EAAS,WACR,8BACuB,IAApB8B,EAAKC,WAAoB,sDAEtBgF,EAAW9G,OAAM,kBACN8G,EAAW9G,OAAM,kBACJ,IAAtB8G,EAAW9G,OAAe,OAAS,QAAO,kCAIlD,cAACC,EAAA,EAAG,CAACC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,UAAU,UAAS,SACjDwG,EAAWvG,KAAI,SAACC,GACf,OACE,eAACC,EAAA,EAAI,CAAmBC,OAAO,OAAOJ,UAAU,MAAK,UAClDE,EAAKG,MACJ,cAACF,EAAA,EAAKG,IAAG,CACPC,IAAKL,EAAKG,MACVG,IAAG,wBAAmBN,EAAKO,OAC3BC,QAAQ,MACRC,MAAO,CACLC,OAAQ,QACRC,MAAO,OACP6F,UAAW,QACX5F,eAAgB,MAChBC,SAAU,YAGZ,KACJ,eAACZ,EAAA,EAAKa,KAAI,WACR,cAACb,EAAA,EAAKc,MAAK,CAACjB,UAAU,OAAM,SAAEE,EAAKO,QACnC,oBAAGT,UAAU,aAAY,sBAAWE,EAAKgB,WACzC,oBAAGlB,UAAU,aAAY,6BACNE,EAAKkB,iBAExB,cAACjB,EAAA,EAAKkB,KAAI,CAACV,MAAO,CAAEC,OAAQ,QAASG,SAAU,UAAW,SACvDb,EAAKoB,cAGR,sBAAKtB,UAAU,iCAAgC,UAC7C,cAACyB,EAAA,EAAM,CACLzB,UAAU,sCACVgC,OAAO,SACPC,KAAM/B,EAAKgC,SAAS,yBAItB,cAACT,EAAA,EAAM,CACLzB,UAAU,sCACVgC,OAAO,SACPC,KAAM/B,EAAKiC,YAAY,+BAM3B,cAACV,EAAA,EAAM,CACLzB,UAAU,mCACV8B,QAAS,kBAAM2E,EAAiBvG,EAAK2B,OAAO,EAAC,oCA5CxC3B,EAAK2B,OAmDpB,UAKV,E,SC1Ea8E,EAAWlE,YAAG,yUC8EZmE,EArEI,WAEjB,IAAIrB,EAASnD,IAGb,EAAqBiD,YAAYzC,GAA1BiE,EAAsC,iBAA5B,GAEbL,EAAa,GAEjB,GAAIjF,EAAKC,WAAY,CACnB,MAA0BsF,YAASH,EAAU,CAE3CjB,UAAW,CAAEpC,GAAIiC,KAFXwB,EAAO,EAAPA,QAASzE,EAAI,EAAJA,KAMjB,GAAIyE,EACF,OAAO,6CACExB,IACTiB,EAAalE,EAAK0E,GAAGR,YAGhB5H,aAAaC,QAAQ,gBAAkB2H,EAAW9G,OAAS,GAC9Dd,aAAaG,QACX,cACA+D,KAAKI,UAAUsD,EAAWvG,KAAI,SAACgH,GAAO,OAAKA,EAAQpF,MAAM,MAIjE,CAIA,IAAM4E,EAAgB,iDAAG,WAAO5E,GAAM,4GAEXgF,EAAW,CAChCnB,UAAW,CACTpC,GAAIiC,EACJ1D,OAAQA,KAET,KAAD,WALMS,EAAI,EAAJA,KAOR6C,QAAQQ,IAAIrD,GAEZO,EAAahB,GAAQ,gDAErBsD,QAAQQ,IAAI,EAAD,IAAM,yDAEpB,gBAfqB,sCAiBtB,OACE,qCACE,cAACC,EAAA,EAAS,CAACC,OAAK,EAAC7F,UAAU,qBAAoB,SAC7C,cAACP,EAAA,EAAS,UACR,0DAKF,cAAC,EAAQ,CACT+G,WAAYA,EACZC,iBAAkBA,EAClBjH,OAAQ,YAKhB,E,wDCwDe0H,GAhII,WAEjB,MAAwCjD,mBAAS,CAC/CkD,SAAU,GACVC,MAAO,GACPC,SAAU,KACV,mBAJKC,EAAY,KAAEC,EAAe,KAMpC,EAA6BlC,YAAY3C,GAAS,mBAA3C8E,EAAO,KAAIpC,EAAK,KAALA,MAGlB,EAAoBnB,oBAAS,GAAtBwD,EAA4B,iBAAnB,GAEhB,EAAkCxD,oBAAS,GAAM,mBAA1CyD,EAAS,KAAEC,EAAY,KAExBC,EAAoB,SAACnD,GACzB,MAAwBA,EAAMzC,OAAtBiE,EAAI,EAAJA,KAAMC,EAAK,EAALA,MACdqB,EAAgB,2BAAKD,GAAY,mBAAGrB,EAAOC,IAC7C,EAEM1B,EAAgB,iDAAG,WAAOC,GAAK,mFAQlC,OAPDA,EAAMC,kBAIuB,IADhBD,EAAMoD,cACVC,kBACPrD,EAAMC,iBACND,EAAMsD,mBACP,kBAGwBP,EAAQ,CAC7B9B,UAAU,eAAM4B,KACf,KAAD,WAFMhF,EAAI,EAAJA,KAIR6C,QAAQQ,IAAIrD,GACZf,EAAKyG,MAAM1F,EAAKkF,QAAQnJ,OAAO,kDAE/B8G,QAAQC,MAAM,EAAD,IACbuC,GAAa,GAAM,QAGrBJ,EAAgB,CACdJ,SAAU,GACVC,MAAO,GACPC,SAAU,KACT,0DACJ,gBA3BqB,sCA6BtB,OACE,qCAEE,eAACvB,EAAA,EAAI,CAACmC,YAAU,EAACR,UAAWA,EAAW1B,SAAUvB,EAAiB,UAChE,eAACsB,EAAA,EAAKoC,MAAK,WACT,cAACpC,EAAA,EAAKqC,MAAK,CAACC,QAAQ,WAAU,sBAC9B,cAACtC,EAAA,EAAKE,QAAO,CACXK,KAAK,OACLC,YAAY,gBACZL,KAAK,WACLE,SAAUyB,EACV1B,MAAOoB,EAAaH,SACpBkB,UAAQ,IAEV,cAACvC,EAAA,EAAKE,QAAQsC,SAAQ,CAACjC,KAAK,UAAS,sCAKvC,eAACP,EAAA,EAAKoC,MAAK,WACT,cAACpC,EAAA,EAAKqC,MAAK,CAACC,QAAQ,QAAO,mBAC3B,cAACtC,EAAA,EAAKE,QAAO,CACXK,KAAK,QACLC,YAAY,qBACZL,KAAK,QACLE,SAAUyB,EACV1B,MAAOoB,EAAaF,MACpBiB,UAAQ,IAEV,cAACvC,EAAA,EAAKE,QAAQsC,SAAQ,CAACjC,KAAK,UAAS,mCAKvC,eAACP,EAAA,EAAKoC,MAAK,WACT,cAACpC,EAAA,EAAKqC,MAAK,CAACC,QAAQ,WAAU,sBAC9B,cAACtC,EAAA,EAAKE,QAAO,CACXK,KAAK,WACLC,YAAY,gBACZL,KAAK,WACLE,SAAUyB,EACV1B,MAAOoB,EAAaD,SACpBgB,UAAQ,IAEV,cAACvC,EAAA,EAAKE,QAAQsC,SAAQ,CAACjC,KAAK,UAAS,sCAIvC,cAAC5E,EAAA,EAAM,CACLC,WAEI4F,EAAaH,UACbG,EAAaF,OACbE,EAAaD,UAGjBhB,KAAK,SACL3F,QAAQ,UAAS,uBAOpB0E,GACC,cAACmD,GAAA,EAAK,CACJC,aAAW,EACXC,QAAS,kBAAMd,GAAa,EAAM,EAClCe,KAAMhB,EACNhH,QAAQ,SACRV,UAAU,gCAA+B,sDAOnD,EC5Be2I,GAjGG,WAChB,MAAwC1E,mBAAS,CAAEmD,MAAO,GAAIC,SAAU,KAAK,mBAAtEC,EAAY,KAAEC,EAAe,KACpC,EAA2BlC,YAAY7C,GAAW,mBAA3CwF,EAAK,KAAI5C,EAAK,KAALA,MAEhB,EAAoBnB,oBAAS,GAAtBwD,EAA4B,iBAAnB,GAChB,EAAkCxD,oBAAS,GAAM,mBAA1CyD,EAAS,KAAEC,EAAY,KAExBC,EAAoB,SAACnD,GACzB,MAAwBA,EAAMzC,OAAtBiE,EAAI,EAAJA,KAAMC,EAAK,EAALA,MACdqB,EAAgB,2BAAKD,GAAY,mBAAGrB,EAAOC,IAC7C,EAEM1B,EAAgB,iDAAG,WAAOC,GAAK,mFAQlC,OAPDA,EAAMC,kBAIuB,IADhBD,EAAMoD,cACVC,kBACPrD,EAAMC,iBACND,EAAMsD,mBACP,kBAGwBC,EAAM,CAC3BtC,UAAU,eAAM4B,KACf,KAAD,WAFMhF,EAAI,EAAJA,KAIRf,EAAKyG,MAAM1F,EAAK0F,MAAM3J,OAAO,kDAE7B8G,QAAQC,MAAM,EAAD,IACbuC,GAAa,GAAM,QAGrBJ,EAAgB,CACdJ,SAAU,GACVC,MAAO,GACPC,SAAU,KACT,0DACJ,gBA1BqB,sCA4BtB,OACE,qCACE,eAACvB,EAAA,EAAI,CAACmC,YAAU,EAACR,UAAWA,EAAW1B,SAAUvB,EAAiB,UAChE,eAACsB,EAAA,EAAKoC,MAAK,WACT,cAACpC,EAAA,EAAKqC,MAAK,CAACC,QAAQ,QAAO,mBAC3B,cAACtC,EAAA,EAAKE,QAAO,CACXK,KAAK,OACLC,YAAY,aACZL,KAAK,QACLE,SAAUyB,EACV1B,MAAOoB,EAAaF,MACpBiB,UAAQ,IAEV,cAACvC,EAAA,EAAKE,QAAQsC,SAAQ,CAACjC,KAAK,UAAS,mCAKvC,eAACP,EAAA,EAAKoC,MAAK,WACT,cAACpC,EAAA,EAAKqC,MAAK,CAACC,QAAQ,WAAU,sBAC9B,cAACtC,EAAA,EAAKE,QAAO,CACXK,KAAK,WACLC,YAAY,gBACZL,KAAK,WACLE,SAAUyB,EACV1B,MAAOoB,EAAaD,SACpBgB,UAAQ,IAEV,cAACvC,EAAA,EAAKE,QAAQsC,SAAQ,CAACjC,KAAK,UAAS,sCAIvC,cAAC5E,EAAA,EAAM,CACLC,WAAY4F,EAAaF,OAASE,EAAaD,UAC/ChB,KAAK,SACL3F,QAAQ,UAAS,uBAOpB0E,GACC,cAACmD,GAAA,EAAK,CACJC,aAAW,EACXC,QAAS,kBAAMd,GAAa,EAAM,EAClCe,KAAMhB,EACNhH,QAAQ,SACRV,UAAU,gCAA+B,iEAOnD,ECtBe4I,GAzEG,WAEhB,MAAkC3E,oBAAS,GAAM,mBAA1C4E,EAAS,KAAEC,EAAY,KAE9B,OACE,qCACE,cAACC,EAAA,EAAM,CAACC,kBAAgB,EAACC,GAAG,OAAOvI,QAAQ,OAAOwI,OAAO,KAAI,SAC3D,eAACzJ,EAAA,EAAS,CAACoG,OAAK,YACd,cAACkD,EAAA,EAAOI,MAAK,CAACC,GAAIC,IAAMC,GAAG,IAAG,iCAG9B,cAACP,EAAA,EAAOQ,OAAM,CAAC,gBAAc,WAC7B,cAACR,EAAA,EAAOS,SAAQ,CAAClG,GAAG,SAAQ,SAC1B,cAACmG,EAAA,EAAG,CAACzJ,UAAU,UAAS,SAErBuB,EAAKC,WACJ,qCACE,cAACiI,EAAA,EAAIJ,KAAI,CAACD,GAAIC,IAAMC,GAAG,IAAII,SAAS,IAAG,8BAGvC,cAACD,EAAA,EAAIJ,KAAI,CAACD,GAAIC,IAAMC,GAAG,SAASI,SAAS,IAAG,4BAG5C,cAACD,EAAA,EAAIJ,KAAI,CAACvH,QAASP,EAAKoI,OAAO,uBAKjC,cAACF,EAAA,EAAIJ,KAAI,CAACvH,QAAS,kBAAMgH,GAAa,EAAK,EAAC,oCAStD,cAACc,EAAA,EAAK,CACJ7H,KAAK,KACL2G,KAAMG,EACNgB,OAAQ,kBAAMf,GAAa,EAAM,EACjC,kBAAgB,eAAc,SAG9B,eAACgB,GAAA,EAAIrK,UAAS,CAACsK,iBAAiB,QAAO,UACrC,cAACH,EAAA,EAAMI,OAAM,CAACC,aAAW,WACvB,cAACL,EAAA,EAAM3I,MAAK,CAACqC,GAAG,eAAc,SAC5B,eAACmG,EAAA,EAAG,CAAC/I,QAAQ,QAAO,UAClB,cAAC+I,EAAA,EAAIS,KAAI,UACP,cAACT,EAAA,EAAIJ,KAAI,CAACK,SAAS,QAAO,qBAE5B,cAACD,EAAA,EAAIS,KAAI,UACP,cAACT,EAAA,EAAIJ,KAAI,CAACK,SAAS,SAAQ,8BAKnC,cAACE,EAAA,EAAM5I,KAAI,UACT,eAAC8I,GAAA,EAAIK,QAAO,WACV,cAACL,GAAA,EAAIM,KAAI,CAACV,SAAS,QAAO,SACxB,cAAC,GAAS,MAEZ,cAACI,GAAA,EAAIM,KAAI,CAACV,SAAS,SAAQ,SACzB,cAAC,GAAU,kBAQ3B,EChEMW,GAAWC,YAAe,CAC9BC,IAAK,aAIDC,GAAWC,aAAW,SAACC,EAAE,GAAkB,IAAfC,EAAO,EAAPA,QAE1BtM,EAAQO,aAAaC,QAAQ,YAEnC,MAAO,CACL8L,QAAQ,2BACHA,GAAO,IACVC,cAAevM,EAAK,iBAAaA,GAAU,KAGjD,IAEMwM,GAAS,IAAIC,IAAa,CAE9BC,KAAMP,GAASQ,OAAOX,IACtBY,MAAO,IAAIC,MAuBEC,OApBf,WACE,OACE,cAACC,EAAA,EAAc,CAACP,OAAQA,GAAO,SAC7B,cAAC,IAAM,UACL,qCACE,cAAC,GAAM,IACP,eAAC,IAAM,WACL,cAAC,IAAK,CAACQ,KAAK,IAAIpE,QAAS,cAAC,EAAW,MACrC,cAAC,IAAK,CAACoE,KAAK,SAASpE,QAAS,cAAC,EAAU,MACzC,cAAC,IAAK,CACJoE,KAAK,IACLpE,QAAS,oBAAIjH,UAAU,YAAW,oCAOhD,EC3CesL,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAAM,EAANA,OAAQC,EAAM,EAANA,OAAQC,EAAM,EAANA,OAAQC,EAAM,EAANA,OAAQC,EAAO,EAAPA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,EACV,GAEJ,E,OCFAQ,IAASC,OAAO,cAAC,GAAG,IAAKC,SAASC,eAAe,SAMjDZ,I","file":"static/js/main.ee9412cf.chunk.js","sourcesContent":["// use this to decode a token and get the user's information out of it\nimport decode from \"jwt-decode\";\n\n// create a new class to instantiate for a user\nclass AuthService {\n  // get user data\n  getProfile() {\n    const token = this.getToken;\n    return token;\n  }\n\n  // check if user's logged in\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token); // handwaiving here\n  }\n\n  // check if token is expired\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem(\"id_token\");\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem(\"id_token\", idToken);\n    // Returns to root url\n    window.location.assign(\"/\");\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem(\"id_token\");\n    // Clear saved books from local storage (if user signs in with a different id)\n    // When token expires this happens as well\n    localStorage.removeItem(\"saved_books\");\n    // this will reload the page and reset the state of the application\n    window.location.assign(\"/\");\n  }\n\n  clearStorage() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem(\"id_token\");\n    // Clear saved books from local storage (if user signs in with a different id)\n    // When token expires this happens as well\n    localStorage.removeItem(\"saved_books\");\n  }\n}\n\nexport default new AuthService();\n","import React from \"react\";\nimport { Container, Button, Card, Row } from \"react-bootstrap\";\nimport Auth from \"../utils/auth\";\n\nconst BookListSearch = ({\n  searchedBooks,\n  savedBookIds,\n  handleSaveBook,\n  source,\n}) => {\n  return (\n    <>\n      <Container>\n        <h2>\n          {searchedBooks.length\n            ? `Viewing ${searchedBooks.length} results:`\n            : \"Search for a book to begin\"}\n        </h2>\n        <Row xs={1} md={2} lg={2} xl={3} className=\"p-2 g-2\">\n          {searchedBooks.map((book) => {\n            return (\n              <Card key={book.bookId} border=\"dark\" className=\"p-1\">\n                {book.image ? (\n                  <Card.Img\n                    src={book.image}\n                    alt={`The cover for ${book.title}`}\n                    variant=\"top\"\n                    style={{\n                      height: \"475px\",\n                      width: \"100%\",\n                      objectPosition: \"top\",\n                      overflow: \"scroll\",\n                    }}\n                  />\n                ) : null}\n                <Card.Body>\n                  <Card.Title className=\"mb-0\">{book.title}</Card.Title>\n                  <p className=\"small mb-0\">{book.authors.length === 1 ? \"Author: \" : \"Authors: \" } {`${book.authors.join(', ')}`}</p>\n                  <p className=\"small mt-0\">\n                    Published Date: {book.publishedDate}\n                  </p>\n                  <Card.Text style={{ height: \"300px\", overflow: \"scroll\" }}>\n                    {book.description}\n                  </Card.Text>\n                  {Auth.loggedIn() && (\n                    <Button\n                      disabled={savedBookIds?.some(\n                        (savedBookId) => savedBookId === book.bookId\n                      )}\n                      className=\"btn-block btn-info\"\n                      onClick={() => handleSaveBook(book.bookId)}\n                    >\n                      {savedBookIds?.some(\n                        (savedBookId) => savedBookId === book.bookId\n                      )\n                        ? \"Book Already Saved!\"\n                        : \"Save this Book!\"}\n                    </Button>\n                  )}\n                  <div className=\"d-flex justify-content-between\">\n                    <Button\n                      className=\"btn-block btn-info mt-1 mr-1\"\n                      size=\"sm\"\n                      target=\"_blank\"\n                      href={book.infoLink}\n                    >\n                      Google Info\n                    </Button>\n                    <Button\n                      className=\"btn-block btn-info mt-1 ml-1\"\n                      size=\"sm\"\n                      target=\"_blank\"\n                      href={book.previewLink}\n                    >\n                      Google Preview\n                    </Button>\n                  </div>\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </Row>\n      </Container>\n    </>\n  );\n};\n\nexport default BookListSearch;\n","import Auth from \"../utils/auth\";\nimport decode from \"jwt-decode\";\n\nexport const getUserId = () => {\n  const token = Auth.loggedIn() ? Auth.getToken() : null;\n  const user = token && decode(token);\n  const userId = token && user.data._id;\n  return userId;\n};\n","import { gql } from \"@apollo/client\";\n\nexport const LOGIN_USER = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n        username\n      }\n    }\n  }\n`;\n\nexport const ADD_USER = gql`\n  mutation addUser($username: String!, $email: String!, $password: String!) {\n    addUser(username: $username, email: $email, password: $password) {\n      token\n      user {\n        _id\n        username\n      }\n    }\n  }\n`;\n\nexport const ADD_BOOK = gql`\n  mutation addBook(\n    $id: ID!\n    $bookId: ID!\n    $authors: [String]\n    $description: String\n    $image: String\n    $title: String\n    $infoLink: String\n    $previewLink: String\n    $publishedDate: String\n  ) {\n    addBook(\n      _id: $id\n      bookId: $bookId\n      authors: $authors\n      description: $description\n      image: $image\n      title: $title\n      infoLink: $infoLink\n      previewLink: $previewLink\n      publishedDate: $publishedDate\n    ) {\n      _id\n      savedBooks {\n        _id\n        bookId\n        title\n        authors\n        description\n        image\n        infoLink\n        previewLink\n        publishedDate\n      }\n    }\n  }\n`;\n\nexport const REMOVE_BOOK = gql`\n  mutation removeBook($id: ID!, $bookId: ID!) {\n    removeBook(_id: $id, bookId: $bookId) {\n      _id\n      savedBooks {\n        title\n        _id\n      }\n    }\n  }\n`;\n","export const getSavedBookIds = () => {\n  const savedBookIds = localStorage.getItem(\"saved_books\")\n    ? JSON.parse(localStorage.getItem(\"saved_books\"))\n    : [];\n\n  return savedBookIds;\n};\n\nexport const saveBookIds = (bookIdArr) => {\n  if (bookIdArr.length) {\n    localStorage.setItem(\"saved_books\", JSON.stringify(bookIdArr));\n  } else {\n    localStorage.removeItem(\"saved_books\");\n  }\n};\n\nexport const removeBookId = (bookId) => {\n  const savedBookIds = localStorage.getItem(\"saved_books\")\n    ? JSON.parse(localStorage.getItem(\"saved_books\"))\n    : null;\n\n  if (!savedBookIds) {\n    return false;\n  }\n\n  const updatedSavedBookIds = savedBookIds?.filter(\n    (savedBookId) => savedBookId !== bookId\n  );\n  localStorage.setItem(\"saved_books\", JSON.stringify(updatedSavedBookIds));\n\n  return true;\n};\n","export const removeDuplicateBooks = (items) => {\n  // results above can return duplicate book id; process below removes duplicates\n  // when duplicate entries exist reeact returns an error message in the console b/c it can't uniquely identify each item\n  const allBookIds = items.map((book) => book.id);\n  const allBooks = items.map((book) => book.volumeInfo);\n\n  let duplicateBookIds = [];\n  let uniqueBookIds = [];\n  let uniqueBooks = [];\n\n  for (let i = 0; i < allBookIds.length; i++) {\n    if (!uniqueBookIds.includes(allBookIds[i])) {\n      uniqueBookIds.push(allBookIds[i]);\n      uniqueBooks.push(allBooks[i]);\n    } else {\n      duplicateBookIds.push({ id: allBookIds[i], index: i });\n    }\n  }\n\n  //add book id to the unique book objects\n  for (let i = 0; i < uniqueBooks.length; i++) {\n    uniqueBooks[i].id = uniqueBookIds[i];\n  }\n\n  return uniqueBooks;\n};\n","import React, { useState, useEffect } from \"react\";\nimport { Jumbotron, Container, Col, Form, Button } from \"react-bootstrap\";\nimport BookList from \"../components/BookListSearch\";\n\nimport { getUserId } from \"../utils/getUserId\"; //get user id from jwt token for db queries/mutations\n\nimport { ADD_BOOK } from \"../utils/mutations\";\nimport { useMutation } from \"@apollo/client\";\nimport { searchGoogleBooks } from \"../utils/API\";\nimport { saveBookIds, getSavedBookIds } from \"../utils/localStorage\";\nimport { removeDuplicateBooks } from \"../utils/removeDuplicateBooks\";\n\nconst SearchBooks = () => {\n  // create state for holding returned google api data\n  const [searchedBooks, setSearchedBooks] = useState([]);\n  // create state for holding our search field data\n  const [searchInput, setSearchInput] = useState(\"\");\n\n  // create state to hold saved bookId values\n  const [savedBookIds, setSavedBookIds] = useState(getSavedBookIds());\n\n  // set up useEffect hook to save `savedBookIds` list to localStorage on component unmount\n  // learn more here: https://reactjs.org/docs/hooks-effect.html#effects-with-cleanup\n  useEffect(() => {\n    return saveBookIds(savedBookIds);\n  }, [savedBookIds]);\n\n  // create method to search for books and set state on form submit\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    if (!searchInput) {\n      return false;\n    }\n\n    try {\n      const response = await searchGoogleBooks(searchInput);\n\n      if (!response.ok) {\n        throw new Error(\"something went wrong!\");\n      }\n\n      const { items } = await response.json();\n\n      // results in \"items\" can return duplicate book id; function below removes duplicates\n      // when duplicate entries exist reeact returns an error message in the console b/c it can't uniquely identify each item\n      let uniqueBooks = removeDuplicateBooks(items);\n\n      const bookData = uniqueBooks.map((book) => ({\n        bookId: book.id,\n        authors: book.authors || [\"No author to display\"],\n        title: book.title,\n        description: book.description || \"No description available.\",\n        image:\n          book.imageLinks?.thumbnail ||\n          \"https://placehold.jp/16/0000FF/ffffff/300x500.png?text=No%20Image%20Available\",\n        publishedDate: book.publishedDate || \"No publish date\",\n        previewLink: book.previewLink || \"No preview link\",\n        infoLink: book.infoLink || \"No info link\",\n      }));\n\n      setSearchedBooks(bookData);\n      setSearchInput(\"\");\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  const [addBook] = useMutation(ADD_BOOK);\n\n  // get userId from jwt token to use in query/mutation\n  let userId = getUserId();\n\n  // create function to handle saving a book to our database\n  const handleSaveBook = async (bookId) => {\n    // find the book in `searchedBooks` state by the matching id\n    const bookToSave = searchedBooks.find((book) => book.bookId === bookId);\n\n    try {\n      const { data } = await addBook({\n        variables: {\n          id: userId,\n          ...bookToSave,\n        },\n      });\n\n      console.log(data); //to eliminate console warning\n\n      // if book saves to user's account, save book id to state\n      setSavedBookIds([...savedBookIds, bookToSave.bookId]);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  return (\n    <>\n      <Jumbotron fluid className=\"text-light bg-dark\">\n        <Container>\n          <h1>Search for Books!</h1>\n          <Form onSubmit={handleFormSubmit}>\n            <Form.Row>\n              <Form.Control\n                name=\"searchInput\"\n                style={{ width: \"65%\" }}\n                value={searchInput}\n                onChange={(e) => setSearchInput(e.target.value)}\n                type=\"text\"\n                size=\"lg\"\n                placeholder=\"Search for a book\"\n              />\n              <Button\n                type=\"submit\"\n                variant=\"success\"\n                className=\"ml-1\"\n                style={{ width: \"30%\" }}\n                size=\"lg\"\n              >\n                Search\n              </Button>\n            </Form.Row>\n          </Form>\n        </Container>\n      </Jumbotron>\n\n      <BookList\n        searchedBooks={searchedBooks}\n        savedBookIds={savedBookIds}\n        handleSaveBook={handleSaveBook}\n        source={\"search\"}\n      />\n    </>\n  );\n};\n\nexport default SearchBooks;\n","// make a search to google books api\n// https://www.googleapis.com/books/v1/volumes?q=harry+potter\nexport const searchGoogleBooks = (query) => {\n  // return fetch(`https://www.googleapis.com/books/v1/volumes?q=${query}`);\n  return fetch(\n    `https://www.googleapis.com/books/v1/volumes?q=${query}&&orderBy=newest&startIndex=0&maxResults=10`\n  );\n};\n","import React from \"react\";\nimport { Container, Button, Card, Row } from \"react-bootstrap\";\nimport Auth from \"../utils/auth\";\n\nconst BookListSaved = ({ savedBooks, handleDeleteBook, source }) => {\n  return (\n    <>\n      <Container>\n        <h2>\n          {Auth.loggedIn() === false\n            ? `Your login session has expired. Please signin again`\n            : savedBooks.length\n            ? `Viewing ${savedBooks.length} saved ${\n                savedBooks.length === 1 ? \"book\" : \"books\"\n              }:`\n            : `You have no saved books!`}\n        </h2>\n        <Row xs={1} md={2} lg={2} xl={3} className=\"p-2 g-2\">\n          {savedBooks.map((book) => {\n            return (\n              <Card key={book.bookId} border=\"dark\" className=\"p-1\">\n                {book.image ? (\n                  <Card.Img\n                    src={book.image}\n                    alt={`The cover for ${book.title}`}\n                    variant=\"top\"\n                    style={{\n                      height: \"475px\",\n                      width: \"100%\",\n                      objectFit: \"cover\",\n                      objectPosition: \"top\",\n                      overflow: \"scroll\",\n                    }}\n                  />\n                ) : null}\n                <Card.Body>\n                  <Card.Title className=\"mb-0\">{book.title}</Card.Title>\n                  <p className=\"small mb-0\">Authors: {book.authors}</p>\n                  <p className=\"small mt-0\">\n                    Published Date: {book.publishedDate}\n                  </p>\n                  <Card.Text style={{ height: \"500px\", overflow: \"scroll\" }}>\n                    {book.description}\n                  </Card.Text>\n\n                  <div className=\"d-flex justify-content-between\">\n                    <Button\n                      className=\"btn-block btn-info mt-1 mr-1 btn-sm\"\n                      target=\"_blank\"\n                      href={book.infoLink}\n                    >\n                      Google Info\n                    </Button>\n                    <Button\n                      className=\"btn-block btn-info mt-1 ml-1 btn-sm\"\n                      target=\"_blank\"\n                      href={book.previewLink}\n                    >\n                      Google Preview\n                    </Button>\n                  </div>\n\n                  <Button\n                    className=\"btn-block btn-danger mt-2 btn-sm\"\n                    onClick={() => handleDeleteBook(book.bookId)}\n                  >\n                    Delete this Book!\n                  </Button>\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </Row>\n      </Container>\n    </>\n  );\n};\n\nexport default BookListSaved;\n","import { gql } from \"@apollo/client\";\n\nexport const QUERY_ME = gql`\n  query me($id: ID!) {\n    me(_id: $id) {\n      _id\n      username\n      email\n      bookCount\n      savedBooks {\n        _id\n        bookId\n        authors\n        description\n        image\n        title\n        infoLink\n        previewLink\n        publishedDate\n      }\n    }\n  }\n`;\n","import React from \"react\";\nimport { Jumbotron, Container } from \"react-bootstrap\";\nimport BookList from \"../components/BookListSaved\";\nimport { getUserId } from \"../utils/getUserId\"; //get user id from jwt token\nimport { useQuery } from \"@apollo/client\";\nimport { QUERY_ME, QUERY_TEST } from \"../utils/queries\";\nimport { REMOVE_BOOK } from \"../utils/mutations\";\nimport { useMutation } from \"@apollo/client\";\nimport { removeBookId } from \"../utils/localStorage\";\nimport Auth from \"../utils/auth\";\n\nconst SavedBooks = () => {\n  // get userId from jwt token to use in query/mutation\n  let userId = getUserId();\n\n  // setup remove book graphql mutation\n  const [removeBook] = useMutation(REMOVE_BOOK);\n\n  let savedBooks = [];\n  // get all user saved book info to render to page\n  if (Auth.loggedIn()) {\n    const { loading, data } = useQuery(QUERY_ME, {\n      // variables: { id: '636f2bdf0a1a38271a7e9b8a' },\n      variables: { id: userId },\n    });\n\n    // using loading paramater to wait for response from useQuery QUERY_ME\n    if (loading) {\n      return <div>Loading...</div>;\n    } else if (userId) {\n      savedBooks = data.me.savedBooks;\n  \n      // if local storage doesn't contain saved books, then set\n      if (!localStorage.getItem(\"saved_books\") && savedBooks.length > 0) {\n        localStorage.setItem(\n          \"saved_books\",\n          JSON.stringify(savedBooks.map((element) => element.bookId))\n        );\n      }\n    }\n  }\n\n\n  // delete book\n  const handleDeleteBook = async (bookId) => {\n    try {\n      const { data } = await removeBook({\n        variables: {\n          id: userId,\n          bookId: bookId,\n        },\n      });\n\n      console.log(data); //to eliminate console warning\n\n      removeBookId(bookId);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  return (\n    <>\n      <Jumbotron fluid className=\"text-light bg-dark\">\n        <Container>\n          <h1>Viewing saved books!</h1>\n        </Container>\n      </Jumbotron>\n\n      {/* {Auth.loggedIn() &&  */}\n        <BookList\n        savedBooks={savedBooks}\n        handleDeleteBook={handleDeleteBook}\n        source={\"saved\"}\n      />\n      {/* } */}\n    </>\n  );\n};\n\nexport default SavedBooks;\n","import React, { useState } from \"react\";\nimport { Form, Button, Alert } from \"react-bootstrap\";\nimport { useMutation } from \"@apollo/client\";\nimport { ADD_USER } from \"../utils/mutations\";\nimport Auth from \"../utils/auth\";\n\nconst SignupForm = () => {\n  // set initial form state\n  const [userFormData, setUserFormData] = useState({\n    username: \"\",\n    email: \"\",\n    password: \"\",\n  });\n\n  const [addUser, { error }] = useMutation(ADD_USER);\n\n  // set state for form validation\n  const [validated] = useState(false);\n  // set state for alert\n  const [showAlert, setShowAlert] = useState(false);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      const { data } = await addUser({\n        variables: { ...userFormData },\n      });\n\n      console.log(data); //to eliminate the webpack error message\n      Auth.login(data.addUser.token);\n    } catch (e) {\n      console.error(e);\n      setShowAlert(true);\n    }\n\n    setUserFormData({\n      username: \"\",\n      email: \"\",\n      password: \"\",\n    });\n  };\n\n  return (\n    <>\n      {/* This is needed for the validation functionality above */}\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        <Form.Group>\n          <Form.Label htmlFor=\"username\">Username</Form.Label>\n          <Form.Control\n            type=\"text\"\n            placeholder=\"Your username\"\n            name=\"username\"\n            onChange={handleInputChange}\n            value={userFormData.username}\n            required\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            Username is required!\n          </Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor=\"email\">Email</Form.Label>\n          <Form.Control\n            type=\"email\"\n            placeholder=\"Your email address\"\n            name=\"email\"\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            Email is required!\n          </Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor=\"password\">Password</Form.Label>\n          <Form.Control\n            type=\"password\"\n            placeholder=\"Your password\"\n            name=\"password\"\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            Password is required!\n          </Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={\n            !(\n              userFormData.username &&\n              userFormData.email &&\n              userFormData.password\n            )\n          }\n          type=\"submit\"\n          variant=\"success\"\n        >\n          Submit\n        </Button>\n      </Form>\n\n      {/* show alert if server response is bad */}\n      {error && (\n        <Alert\n          dismissible\n          onClose={() => setShowAlert(false)}\n          show={showAlert}\n          variant=\"danger\"\n          className=\"my-3 p-3 bg-danger text-white\"\n        >\n          Something went wrong with your signup!\n        </Alert>\n      )}\n    </>\n  );\n};\n\nexport default SignupForm;\n","// see SignupForm.js for comments\nimport React, { useState } from \"react\";\nimport { Form, Button, Alert } from \"react-bootstrap\";\nimport { useMutation } from \"@apollo/client\";\nimport { LOGIN_USER } from \"../utils/mutations\";\nimport Auth from \"../utils/auth\";\n\nconst LoginForm = () => {\n  const [userFormData, setUserFormData] = useState({ email: \"\", password: \"\" });\n  const [login, { error }] = useMutation(LOGIN_USER);\n\n  const [validated] = useState(false);\n  const [showAlert, setShowAlert] = useState(false);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      const { data } = await login({\n        variables: { ...userFormData },\n      });\n\n      Auth.login(data.login.token);\n    } catch (e) {\n      console.error(e);\n      setShowAlert(true);\n    }\n\n    setUserFormData({\n      username: \"\",\n      email: \"\",\n      password: \"\",\n    });\n  };\n\n  return (\n    <>\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        <Form.Group>\n          <Form.Label htmlFor=\"email\">Email</Form.Label>\n          <Form.Control\n            type=\"text\"\n            placeholder=\"Your email\"\n            name=\"email\"\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            Email is required!\n          </Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor=\"password\">Password</Form.Label>\n          <Form.Control\n            type=\"password\"\n            placeholder=\"Your password\"\n            name=\"password\"\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            Password is required!\n          </Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={!(userFormData.email && userFormData.password)}\n          type=\"submit\"\n          variant=\"success\"\n        >\n          Submit\n        </Button>\n      </Form>\n\n      {/* show alert if server response is bad */}\n      {error && (\n        <Alert\n          dismissible\n          onClose={() => setShowAlert(false)}\n          show={showAlert}\n          variant=\"danger\"\n          className=\"my-3 p-3 bg-danger text-white\"\n        >\n          Something went wrong with your login credentials!\n        </Alert>\n      )}\n    </>\n  );\n};\n\nexport default LoginForm;\n","import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Navbar, Nav, Container, Modal, Tab } from \"react-bootstrap\";\nimport SignUpForm from \"./SignupForm\";\nimport LoginForm from \"./LoginForm\";\nimport Auth from \"../utils/auth\";\n\nconst AppNavbar = () => {\n  // set modal display state\n  const [showModal, setShowModal] = useState(false);\n\n  return (\n    <>\n      <Navbar collapseOnSelect bg=\"dark\" variant=\"dark\" expand=\"lg\">\n        <Container fluid>\n          <Navbar.Brand as={Link} to=\"/\">\n            Google Books Search\n          </Navbar.Brand>\n          <Navbar.Toggle aria-controls=\"navbar\" />\n          <Navbar.Collapse id=\"navbar\">\n            <Nav className=\"ml-auto\">\n              {/* if user is logged in show saved books & logout nav links else show login/signup modal */}\n              {Auth.loggedIn() ? (\n                <>\n                  <Nav.Link as={Link} to=\"/\" eventKey=\"1\">\n                    Search For Books\n                  </Nav.Link>\n                  <Nav.Link as={Link} to=\"/saved\" eventKey=\"2\">\n                    See Your Books\n                  </Nav.Link>\n                  <Nav.Link onClick={Auth.logout}>\n                    Logout\n                  </Nav.Link>\n                </>\n              ) : (\n                <Nav.Link onClick={() => setShowModal(true)}>\n                  Login/Sign Up\n                </Nav.Link>\n              )}\n            </Nav>\n          </Navbar.Collapse>\n        </Container>\n      </Navbar>\n      {/* set up modal data */}\n      <Modal\n        size=\"lg\"\n        show={showModal}\n        onHide={() => setShowModal(false)}\n        aria-labelledby=\"signup-modal\"\n      >\n        {/* tab container to do either signup or login component */}\n        <Tab.Container defaultActiveKey=\"login\">\n          <Modal.Header closeButton>\n            <Modal.Title id=\"signup-modal\">\n              <Nav variant=\"pills\">\n                <Nav.Item>\n                  <Nav.Link eventKey=\"login\">Login</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link eventKey=\"signup\">Sign Up</Nav.Link>\n                </Nav.Item>\n              </Nav>\n            </Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <Tab.Content>\n              <Tab.Pane eventKey=\"login\">\n                <LoginForm />\n              </Tab.Pane>\n              <Tab.Pane eventKey=\"signup\">\n                <SignUpForm />\n              </Tab.Pane>\n            </Tab.Content>\n          </Modal.Body>\n        </Tab.Container>\n      </Modal>\n    </>\n  );\n};\n\nexport default AppNavbar;\n","import React from \"react\";\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  createHttpLink,\n} from \"@apollo/client\";\nimport { setContext } from \"@apollo/client/link/context\";\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\nimport SearchBooks from \"./pages/SearchBooks\";\nimport SavedBooks from \"./pages/SavedBooks\";\nimport Navbar from \"./components/Navbar\";\n\n// Construct our main GraphQL API endpoint\nconst httpLink = createHttpLink({\n  uri: \"/graphql\",\n});\n\n// Construct request middleware that will attach the JWT token to every request as an `authorization` header\nconst authLink = setContext((_, { headers }) => {\n  // get the authentication token from local storage if it exists\n  const token = localStorage.getItem(\"id_token\");\n  // return the headers to the context so httpLink can read them\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : \"\",\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  // Set up our client to execute the `authLink` middleware prior to making the request to our GraphQL API\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <>\n          <Navbar />\n          <Routes>\n            <Route path=\"/\" element={<SearchBooks />} />\n            <Route path=\"/saved\" element={<SavedBooks />} />\n            <Route\n              path=\"*\"\n              element={<h1 className=\"display-2\">Wrong page!</h1>}\n            />\n          </Routes>\n        </>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}